// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "CityModel.pb.h"
// @@protoc_insertion_point(imports)

@implementation CityModelRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [CityModelRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [AreaModelRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface CityModel ()
@property SInt32 cityId;
@property (strong) NSString* cityName;
@property (strong) NSMutableArray * areaListArray;
@end

@implementation CityModel

- (BOOL) hasCityId {
  return !!hasCityId_;
}
- (void) setHasCityId:(BOOL) _value_ {
  hasCityId_ = !!_value_;
}
@synthesize cityId;
- (BOOL) hasCityName {
  return !!hasCityName_;
}
- (void) setHasCityName:(BOOL) _value_ {
  hasCityName_ = !!_value_;
}
@synthesize cityName;
@synthesize areaListArray;
@dynamic areaList;
- (instancetype) init {
  if ((self = [super init])) {
    self.cityId = 0;
    self.cityName = @"";
  }
  return self;
}
static CityModel* defaultCityModelInstance = nil;
+ (void) initialize {
  if (self == [CityModel class]) {
    defaultCityModelInstance = [[CityModel alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultCityModelInstance;
}
- (instancetype) defaultInstance {
  return defaultCityModelInstance;
}
- (NSArray *)areaList {
  return areaListArray;
}
- (AreaModel*)areaListAtIndex:(NSUInteger)index {
  return [areaListArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCityId) {
    [output writeInt32:1 value:self.cityId];
  }
  if (self.hasCityName) {
    [output writeString:2 value:self.cityName];
  }
  [self.areaListArray enumerateObjectsUsingBlock:^(AreaModel *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:3 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasCityId) {
    size_ += computeInt32Size(1, self.cityId);
  }
  if (self.hasCityName) {
    size_ += computeStringSize(2, self.cityName);
  }
  [self.areaListArray enumerateObjectsUsingBlock:^(AreaModel *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(3, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CityModel*) parseFromData:(NSData*) data {
  return (CityModel*)[[[CityModel builder] mergeFromData:data] build];
}
+ (CityModel*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CityModel*)[[[CityModel builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CityModel*) parseFromInputStream:(NSInputStream*) input {
  return (CityModel*)[[[CityModel builder] mergeFromInputStream:input] build];
}
+ (CityModel*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CityModel*)[[[CityModel builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CityModel*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CityModel*)[[[CityModel builder] mergeFromCodedInputStream:input] build];
}
+ (CityModel*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CityModel*)[[[CityModel builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CityModelBuilder*) builder {
  return [[CityModelBuilder alloc] init];
}
+ (CityModelBuilder*) builderWithPrototype:(CityModel*) prototype {
  return [[CityModel builder] mergeFrom:prototype];
}
- (CityModelBuilder*) builder {
  return [CityModel builder];
}
- (CityModelBuilder*) toBuilder {
  return [CityModel builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasCityId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cityId", [NSNumber numberWithInteger:self.cityId]];
  }
  if (self.hasCityName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cityName", self.cityName];
  }
  [self.areaListArray enumerateObjectsUsingBlock:^(AreaModel *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"areaList"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasCityId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.cityId] forKey: @"cityId"];
  }
  if (self.hasCityName) {
    [dictionary setObject: self.cityName forKey: @"cityName"];
  }
  for (AreaModel* element in self.areaListArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"areaList"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CityModel class]]) {
    return NO;
  }
  CityModel *otherMessage = other;
  return
      self.hasCityId == otherMessage.hasCityId &&
      (!self.hasCityId || self.cityId == otherMessage.cityId) &&
      self.hasCityName == otherMessage.hasCityName &&
      (!self.hasCityName || [self.cityName isEqual:otherMessage.cityName]) &&
      [self.areaListArray isEqualToArray:otherMessage.areaListArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasCityId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.cityId] hash];
  }
  if (self.hasCityName) {
    hashCode = hashCode * 31 + [self.cityName hash];
  }
  [self.areaListArray enumerateObjectsUsingBlock:^(AreaModel *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CityModelBuilder()
@property (strong) CityModel* resultCityModel;
@end

@implementation CityModelBuilder
@synthesize resultCityModel;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultCityModel = [[CityModel alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultCityModel;
}
- (CityModelBuilder*) clear {
  self.resultCityModel = [[CityModel alloc] init];
  return self;
}
- (CityModelBuilder*) clone {
  return [CityModel builderWithPrototype:resultCityModel];
}
- (CityModel*) defaultInstance {
  return [CityModel defaultInstance];
}
- (CityModel*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CityModel*) buildPartial {
  CityModel* returnMe = resultCityModel;
  self.resultCityModel = nil;
  return returnMe;
}
- (CityModelBuilder*) mergeFrom:(CityModel*) other {
  if (other == [CityModel defaultInstance]) {
    return self;
  }
  if (other.hasCityId) {
    [self setCityId:other.cityId];
  }
  if (other.hasCityName) {
    [self setCityName:other.cityName];
  }
  if (other.areaListArray.count > 0) {
    if (resultCityModel.areaListArray == nil) {
      resultCityModel.areaListArray = [[NSMutableArray alloc] initWithArray:other.areaListArray];
    } else {
      [resultCityModel.areaListArray addObjectsFromArray:other.areaListArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CityModelBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CityModelBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setCityId:[input readInt32]];
        break;
      }
      case 18: {
        [self setCityName:[input readString]];
        break;
      }
      case 26: {
        AreaModelBuilder* subBuilder = [AreaModel builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addAreaList:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasCityId {
  return resultCityModel.hasCityId;
}
- (SInt32) cityId {
  return resultCityModel.cityId;
}
- (CityModelBuilder*) setCityId:(SInt32) value {
  resultCityModel.hasCityId = YES;
  resultCityModel.cityId = value;
  return self;
}
- (CityModelBuilder*) clearCityId {
  resultCityModel.hasCityId = NO;
  resultCityModel.cityId = 0;
  return self;
}
- (BOOL) hasCityName {
  return resultCityModel.hasCityName;
}
- (NSString*) cityName {
  return resultCityModel.cityName;
}
- (CityModelBuilder*) setCityName:(NSString*) value {
  resultCityModel.hasCityName = YES;
  resultCityModel.cityName = value;
  return self;
}
- (CityModelBuilder*) clearCityName {
  resultCityModel.hasCityName = NO;
  resultCityModel.cityName = @"";
  return self;
}
- (NSMutableArray *)areaList {
  return resultCityModel.areaListArray;
}
- (AreaModel*)areaListAtIndex:(NSUInteger)index {
  return [resultCityModel areaListAtIndex:index];
}
- (CityModelBuilder *)addAreaList:(AreaModel*)value {
  if (resultCityModel.areaListArray == nil) {
    resultCityModel.areaListArray = [[NSMutableArray alloc]init];
  }
  [resultCityModel.areaListArray addObject:value];
  return self;
}
- (CityModelBuilder *)setAreaListArray:(NSArray *)array {
  resultCityModel.areaListArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (CityModelBuilder *)clearAreaList {
  resultCityModel.areaListArray = nil;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
